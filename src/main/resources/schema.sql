DROP TABLE if exists "LIKES";
DROP TABLE if exists "FILMS_GENRES";
DROP TABLE if exists "FRIENDSHIP";
DROP TABLE if exists "FILMS";
DROP TABLE if exists "GENRES";
DROP TABLE if exists "MPA_RATING";
DROP TABLE if exists "USERS";

CREATE TABLE "GENRES"                     -- создание таблицы жанров
(
    id bigint primary key,
    name varchar(40) not null unique
);
DROP sequence if exists genres_seq;
CREATE sequence if not exists genres_seq START WITH 1 minvalue 1 INCREMENT BY 1;

CREATE TABLE "MPA_RATING"                 -- создание таблицы рейтинга MPA
(
    id bigint primary key ,
    name varchar(40) not null unique
);
DROP sequence if exists mpa_seq;
CREATE sequence if not exists mpa_seq START WITH 1 minvalue 1 INCREMENT BY 1;

CREATE TABLE "USERS"                        -- создание таблицы пользователей users
(
    id bigint primary key,
    login  varchar(200) not null,
    name varchar(200),
    email varchar(200) not null UNIQUE,
    birthday date not null
);
DROP sequence if exists users_seq;
CREATE sequence if not exists users_seq START WITH 1 minvalue 1 INCREMENT BY 1;

CREATE TABLE "FILMS"                                -- создание таблицы фильмов
(
    id bigint primary key,
    name varchar(200) not null,
    description varchar(200) not null,
    releaseDate date not null,
    duration bigint not null,
    rate int default '0',
    genre_id int,
    mpa_rating_id bigint not null,
    CONSTRAINT unique_name_releaseDate UNIQUE (name, releaseDate),
    CONSTRAINT duration CHECK (duration > 0),
    CONSTRAINT films_genres_fk FOREIGN KEY (genre_id) REFERENCES GENRES (id) ON DELETE CASCADE,
    CONSTRAINT films_mpa_rating_fk FOREIGN KEY (mpa_rating_id) REFERENCES MPA_RATING (id) ON DELETE CASCADE
    );
DROP sequence if exists films_seq;
CREATE sequence if not exists films_seq START WITH 1 minvalue 1 INCREMENT BY 1;

CREATE TABLE "LIKES"                                -- создание таблицы лайков (user_id - film_id)
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id bigint,
    user_id bigint,
    CONSTRAINT unique_user_id_film_id UNIQUE ( film_id, user_id),
    CONSTRAINT film_id_likes_fk FOREIGN KEY (film_id) REFERENCES FILMS (id) ON DELETE CASCADE,
    CONSTRAINT user_id_likes_fk FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);


CREATE TABLE "FILMS_GENRES"                             -- создание вспомогательной таблицы жанров (film_id - genre_id)
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id bigint,
    genre_id bigint,
    CONSTRAINT f_g_key UNIQUE (film_id, genre_id),
    CONSTRAINT film_id_f_g_fk FOREIGN KEY (film_id) REFERENCES FILMS (id) ON DELETE CASCADE,
    CONSTRAINT genre_id_f_g_fk FOREIGN KEY (genre_id) REFERENCES GENRES (id) ON DELETE CASCADE
);


CREATE TABLE "FRIENDSHIP"                             -- создание вспомогательной таблицы дружбы (user_id - friend_id)
(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id bigint,
    friend_id bigint,
    CONSTRAINT unique_friendship UNIQUE (user_id, friend_id),
    CONSTRAINT user_id_frnd_fk FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE,
    CONSTRAINT friend_id_f_g_fk FOREIGN KEY (friend_id) REFERENCES USERS (id) ON DELETE CASCADE
);